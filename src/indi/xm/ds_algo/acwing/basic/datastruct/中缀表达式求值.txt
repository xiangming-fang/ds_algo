    public static int midCalculate(String s){
        Stack<Integer> numStk = new Stack<>();
        Stack<Character> opStk = new Stack<>();
        HashMap<Character, Integer> opPriorityMap = new HashMap<>();
        opPriorityMap.put('+',1);
        opPriorityMap.put('-',1);
        opPriorityMap.put('*',2);
        opPriorityMap.put('/',2);
        opPriorityMap.put('^',3);
        for (int i = 0; i < s.length(); i++) {
            if (Character.isDigit(s.charAt(i))){
                int j = i,x = 0;
                while (j < s.length() && Character.isDigit(s.charAt(j))){
                    x = x * 10 + s.charAt(j) - '0';
                    j ++;
                }
                numStk.push(x);
                // 因为最外层的for有i++
                i = j - 1;
            }
            else if (s.charAt(i) == '('){
                opStk.push(s.charAt(i));
            }
            else if (s.charAt(i) == ')'){
                while (opStk.peek() != '(') eval(numStk,opStk);
                // 弹出 '('
                opStk.pop();
            }
            else {
                // （1）如果操作符栈不为空
                // （2）并且操作符的栈顶元素不为 左括号：'(' ==> (2
                // （3）并且栈顶操作符的优先级大于等于当前字符
                while (!opStk.isEmpty() && opStk.peek() != '(' && opPriorityMap.get(opStk.peek()) >= opPriorityMap.get(s.charAt(i))) eval(numStk,opStk);
                opStk.push(s.charAt(i));
            }
        }
        // 清空操作符栈中的所有操作符
        while (!opStk.isEmpty()) eval(numStk,opStk);
        return numStk.peek();
    }

    public static void eval(Stack<Integer> numStk,Stack<Character> opStk){

        int b = numStk.pop();
        int a = numStk.pop();

        Character op = opStk.pop();
        if (op == '+'){
            numStk.push(a + b);
        }
        else if (op == '-'){
            numStk.push(a - b);
        }
        else if (op == '*'){
            numStk.push(a * b);
        }
        else if (op == '/'){
            numStk.push(a / b);
        }
        else if (op == '^'){
            numStk.push((int)Math.pow(a,b));
        }

    }