固定窗口的最大值/最小值。

这里的单调队列其实是个双端队列：deque.

所有有关单调性的，都是分析答案的单调性。

（1）窗口为k的最小值

        int N = (int)1e6+10;
        int[] q = new int[N];
        int tt = -1,hh = 0;
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            // 移除不在窗口内的单调队列
            while (tt >= hh && i - q[hh] + 1 > k) hh++;
            // 如果当前值小于等于队尾元素，那么移除队尾
            while (tt >= hh && nums[i] <= nums[q[tt]]) tt--;
            // 将当前元素放入队尾
            q[++tt] = i;
            // 只有当前位置至少为k-1才能说明这个窗口满K个元素，才可以打印
            if (i >= k - 1) System.out.print(nums[q[hh]] + " ");
        }

（2）窗口为k的最大值

        int N = (int)1e6+10;
        int[] q = new int[N];
        int tt = -1,hh = 0;
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            while (tt >= hh && i - q[hh] + 1 > k) hh++;
            // 窗口最大值就这里需要做改变
            // 当前元素大于等于队尾，那么队尾移出
            while (tt >= hh && nums[i] >= nums[q[tt]]) tt--;
            q[++tt] = i;
            if (i >= k -1) System.out.print(nums[q[hh]] + " ");
        }

