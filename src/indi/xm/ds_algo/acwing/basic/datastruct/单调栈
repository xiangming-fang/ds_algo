单调栈：维护一个单调上升（下降）的栈

常见模型：找出每个数左边离它最近的比它小/大的数.（同理右边也可以）

（1）左1小
int N = 100010;

// 单调上升
int[] stk = new int[N];

int tt = 0;

int n = 5000;

int[] origin = new int[n];

int[] ans = new int[n];

for(int i = 0; i < n; i ++){
    while(tt > 0 && stk[tt] >= origin[i]) tt--;
    // 不存在返回-1
    if(tt==0) ans[i] = -1;
    else ans[i] = stk[tt];
    stk[++tt] = origin[i];
}


（2）左1大
int N = 100010;
int n = 5000;

int[] stk = new int[N];
int tt = 0;

int[] origin = new int[n];

int[] ans = new int[n];

int i = 0;
while(i < n){
    while(tt > 0 && stk[tt] <= origin[i]) tt --;
    if(tt == 0) ans[i] = -1;
    else ans[i] = stk[tt];
    stk[++tt] = origin[i];
    i ++;
}



（3）右1小 ==> 这个可以看成将数组反转，看成左1小
int N = 100010;
int n = 5000;

int[] stk = new int[N];
int tt = 0;

int[] origin = new int[n];
int[] ans = new int[n];

for(int i = n - 1; i >= 0; i --){

    while(tt > 0 && stk[tt] >= origin[i]) tt --;
    if(tt == 0) ans[i] = -1;
    else ans[i] = stk[tt];
    stk[++tt] = origin[i];

}

（4）右1大 ==> 可以将数组反转，看成左1大

int N = 100010;
int n = 5000;

int[] stk = new int[N];
int tt = 0;

int[] origin = new int[n];
int[] ans = new int[n];

for(int i = n -1; i >= 0; i --){

    while(tt > 0 && stk[tt] <= origin[i]) tt--;
    if(tt == 0) ans[i] = -1;
    else ans[i] = stk[tt];
    stk[++tt] = origin[i];

}

